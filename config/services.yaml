# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

    stripe.secret_key: '%env(STRIPE_SECRET_KEY)%'


    avatars_directory: '%kernel.project_dir%/public/images/avatars'
    oldPictures_directory: '%kernel.project_dir%/public/images/old'
    artists_directory : '%kernel.project_dir%/public/images/artists/'

    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class nameSTRIPE
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\UserListener:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login', method: 'onUserLogin' }

    # DELETE EXPIRED PASSWORD RESET REQUEST COMMAND
    App\Command\CleanExpiredPasswordResetRequestsCommand:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $resetPasswordRequestRepository: '@App\Repository\ResetPasswordRequestRepository'
        tags:
            - { name: 'console.command' }

    App\Twig\AppExtension:
        tags:
            - { name: 'twig.extension' }

    App\Service\MailerService:
            arguments:
                $mailer: '@Symfony\Component\Mailer\MailerInterface'

    App\Controller\PaymentController:
        arguments:
             $stripeSecretKey: '%stripe.secret_key%'

    # UPDATE SUBSCRIPTION STATUS COMMAND
    App\Command\UpdateSubscriptionStatusCommand:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $subscriptionRepository: '@App\Repository\SubscriptionRepository'
        tags:
            - { name: 'console.command' }

    # MARK EVENTS AS ARCHIVED
    App\Command\MarkEventsAsArchivedCommand:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $areaRepository: '@App\Repository\AreaRepository'
        tags:
            - { name: 'console.command' }