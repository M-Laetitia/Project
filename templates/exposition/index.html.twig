{% extends 'base.html.twig' %}

{% block title %}List Expositions{% endblock %}
{% block meta %}List Expositions{% endblock %}

{% block body %}


<div class="banner">
    <div>
        <h1 class="banner-title">OUR EXPOSITIONS</h1>
        <p class="banner-text">Text text<span class="underscore-static">_</span></p>
    </div>
</div>



<section class="content" id="events-index">
    {% for expo in ongoingExpos %}

        <div class="container-event">
            <div id="picture-event">
                <figure>
                    <div></div>
                </figure>
            </div>
            <div id="infos-event">
                <h2 class="text-n1">{{expo.name}}<span class="">_</span></h2>
                <p id="resume-event">{{expo.description}}</p>
                <div id="details-event">
                    <p><span>Date : </span> {{expo.startDate|formatDate}} <span>|</span> {{expo.startDate|date('H:i')}} - {{expo.endDate|date('H:i')}}</p> 
                    <p><span>Statut : </span>
                    
                        <span class="status {{ expo.status == 'OPEN' ? 'open' : 
                        (expo.status == 'CLOSED' ? 'closed' : 
                        (expo.status == 'PENDING' ? 'pending' : 
                        (expo.status == 'ARCHIVED' ? 'archived' : 'status-default'))) }}">
                        {{ expo.status }}
                        </span>

                    </p>
                    <p><span>Capacity : </span> {{expo.nbReversationMade}}  /  {{expo.nbRooms}}</p>

                </div>
                <div id="btn-event">
                    <div class="button btn6"><a href="{{ path('show_exposition', { slug : expo.slug  }) }}">SEE MORE</a></div>
                    
                </div>
            </div>
        </div>
    {% endfor %}

    

</section>



<div class="ongoing-events">

    {% for expo in ongoingExpos %}
        <div>
            <p>
                <span class="name">{{expo.name}}</span> 
                <span class="status {{ expo.status == 'OPEN' ? 'open' : 
                                    (expo.status == 'CLOSED' ? 'closed' : 
                                    (expo.status == 'PENDING' ? 'pending' : 
                                    (expo.status == 'ARCHIVED' ? 'archived' : 'status-default'))) }}">
                    {{ expo.status }}
                </span>
            
            </p>

            <p>{{expo.startDate|formatDate}} - {{expo.endDate|formatDate}} </p>
            <p>{{expo.startDate|date('H:i')}} - {{expo.endDate|date('H:i')}}</p>

            <p>{{expo.description}}</p>

            <p>Capacity: {{expo.nbReversationMade}}  /  {{expo.nbRooms}} - Remaining: {{expo.nbReversationRemaining}}</p>
            <p>Number of Proposals: {{ proposalCounts[expo.id] }}</p>
            {# <p><a href="{{ path('show_exposition', {'id' : expo.id}) }}">See details <i class="fa-solid fa-plus"></i> </a></p> #}
        
            {% if expo.status == 'OPEN' %}
                {# <p>Inscriptions open - click <a href="{{ path('show_exposition', {'id' : expo.id}) }}">here</a></p> #}
            {% else %}
                <p>Inscriptions not open</p>
            {% endif %}
            
            <hr>
            <p>Want to showcase your work in this exposition?</p>
            
            {% if is_granted('ROLE_ARTIST') %}
                
                {% if existingProposals[expo.id] %}
                    <p>You have an existing proposal for this exposition.</p>
                {% else %} 
                {# <p>Make a request : <a href="{{ path('new_exposition_proposal', {'id': expo.id }) }}">Make a request</a></p> #}
                {% endif %}
            
            {% else %}
                {# else they need to submit a form to get the artist status/role #}
                <p>You are not an artist, you can't make a request for an expostion.</p>
                <p>You can get the role by submitting a form: <a href="#">HERE</a></p>
            {% endif %}
            
            <hr>
            <hr>
        </div>
        {% endfor %}
</div>

<div class="past-event-title">
    <h2>See past expostions</h2> 
    <div class="past-event-btn"><i class="ri-eye-close-fill"></i></div>
</div>

<div class="past-events" style="display:none">

    {% for expo in pastExpos %}
    <div>
        <p>
            <span class="name">{{expo.name}}</span> 
            <span class="status {{ expo.status == 'OPEN' ? 'open' : 
                                (expo.status == 'CLOSED' ? 'closed' : 
                                (expo.status == 'PENDING' ? 'pending' : 
                                (expo.status == 'ARCHIVED' ? 'archived' : 'status-default'))) }}">
                {{ expo.status }}
            </span>
        
        </p>

        <p>{{expo.startDate|formatDate}} - {{expo.endDate|formatDate}} </p>
        <p>{{expo.startDate|date('H:i')}} - {{expo.endDate|date('H:i')}}</p>

        <p>{{expo.description}}</p>

        <p>Capacity: {{expo.nbReversationMade}}  /  {{expo.nbRooms}} - Remaining: {{expo.nbReversationRemaining}}</p>
        {# <p>Number of Proposals: {{ proposalCounts[expo.id] }}</p> #}
        {# <p><a href="{{ path('show_exposition', {'id' : expo.id}) }}">See details <i class="fa-solid fa-plus"></i> </a></p> #}
    
        <hr>
        <hr>
    </div>
    {% endfor %}

</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Function to check if an element is visible in the viewport
        function isElementInViewport(el) {
            // Retrieve the bounding rectangle of the element
            var rect = el.getBoundingClientRect();
            // Check if the element's top, left, bottom, and right coordinates are within the viewport
            return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
        }
    
        // Function to check and show visible events
        function checkAndShowEvents() {
            // Remove the "underscore" class from all spans
        document.querySelectorAll('.container-event span').forEach(function(span) {
            span.classList.remove('underscore');
        });


            // Select all elements with class 'container-event' and loop through them
            document.querySelectorAll('.container-event').forEach(function(container) {
                // Check if the current container is in the viewport
                if (isElementInViewport(container)) {
                    // change the opacity and make the container visible
                    container.style.opacity = '1';

                    // Add the "underscore" class to the span within the current container
                container.querySelector('span').classList.add('underscore');
                }
            });
        }
    
        // Event listener to detect user scrolling
        window.addEventListener('scroll', checkAndShowEvents);
    
        // Check and show visible events when the page initially loads
        // checkAndShowEvents();

        // Delay the initial check and display of events
        setTimeout(checkAndShowEvents, 1000);
    });
</script>

{% endblock %}
